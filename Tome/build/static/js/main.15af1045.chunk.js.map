{"version":3,"sources":["js/constants/index.js","js/actions/index.js","js/props.js","js/components/list/NavList.js","js/routes.js","js/components/settlement/list/SettlementListContainer.js","js/components/App.jsx","serviceWorker.js","js/reducers/index.js","js/store/index.js","js/middleware/index.js","js/components/Red.js","js/components/Green.js","js/components/settlement/Settlement.js","js/components/list/List.js","js/components/place/PlaceList.js","js/components/person/PersonList.js","js/components/settlement/SettlementPage.js","js/components/person/Person.js","js/components/person/PersonPage.js","index.js"],"names":["FETCH_SETTLEMENT_LIST","FETCH_SETTLEMENT","RECEIVE_SETTLEMENT_LIST","RECEIVE_SETTLEMENT","FETCH_PLACE","FETCH_PERSON","RECEIVE_PERSON","fetchPerson","payload","type","LIST_ITEM","PropTypes","shape","id","number","required","name","string","population","description","race","NavList","_this","this","react_default","a","createElement","className","props","items","map","el","key","react_router_dom","to","onSelectLink","React","Component","Settlements","Object","classCallCheck","show","concat","_SettlementListContainer_","fetchSettlementList","NavList_NavList","settlement","SettlementListContainer","connect","state","dispatch","App","list_SettlementListContainer","Boolean","window","location","hostname","match","initialState","settlements","settlementPage","placeList","personList","personPage","person","rootReducer","arguments","length","undefined","action","assign","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","_ref","next","fetch","then","res","json","data","catch","console","log","settlementId","parseInt","personId","Red","params","style","color","Green","Settlement","renderSettlement","List","_","onSelectItem","onClick","e","selectItem","_PlaceListContainer_","List_List","fetchPlace","PlaceList","placeId","_PersonListContainer_","PersonList","_fetchPerson_","_SettlementPage_","fetchSettlement","Settlement_Settlement","place_PlaceList","person_PersonList","Person","renderPerson","_PersonPage_","Person_Person","ReactDOM","render","es","react_router","exact","path","component","SettlementPage","PersonPage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAAaA,EAAwB,wBACxBC,EAAmB,mBACnBC,EAA0B,0BAC1BC,EAAqB,qBACrBC,EAAc,cACdC,EAAe,eACfC,EAAiB,iBCwBvB,SAASC,EAAYC,GAC1B,MAAO,CAAEC,KAAMJ,EAAcG,QAASA,uBC5B3BE,EAAYC,IAAUC,MAAM,CACvCC,GAAIF,IAAUG,OAAOC,SACrBC,KAAML,IAAUM,OAAOF,cAGCJ,IAAUC,MAAM,CACxCF,YACAQ,WAAYP,IAAUG,SAGHH,IAAUC,MAAM,CACnCF,YACAS,YAAaR,IAAUM,SAGHN,IAAUC,MAAM,CACpCF,YACAU,KAAMT,IAAUM,OAChBE,YAAaR,IAAUM,gBChBJI,mLAMV,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACXJ,KAAKK,MAAMC,MAAMC,IAAI,SAAAC,GAAE,OACtBP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACVK,IAAKD,EAAGlB,IACVW,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAIZ,EAAKM,MAAMO,aAAaJ,EAAGlB,KAAMkB,EAAGf,iBAZrBoB,IAAMC,WCL9BC,EAAb,SAAAA,IAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAe,IAAaA,EACJG,KAAO,SAAC5B,GACb,qBAAA6B,OAAsB7B,ICInB,IAaD8B,8LAGFpB,KAAKK,MAAMgB,uDAIX,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmB,EAAD,CAAShB,MAAON,KAAKK,MAAMkB,WAClBX,aAAcG,EAAYG,eAVHJ,aAkBzBU,EAFiBC,YA7BD,SAACC,GAC9B,MAAO,CAAEH,WAAYG,EAAMH,aAGK,SAACI,GACjC,MAAO,CAELN,oBAAqB,WACnBM,EJHG,CAAEzC,KAAMT,OIwBegD,CAA6CL,GCrB9DQ,MAXf,WACE,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAC0B,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uEChBAC,EAAe,CACnBC,YAAa,GACbC,eAAgB,CACdd,WAAY,GACZe,UAAW,GACXC,WAAY,IAEdC,WAAY,CACVC,OAAQ,KA6BGC,MAzBf,WAAmD,IAA9BhB,EAA8BiB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBR,EAAcW,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjD,OAAQC,EAAO5D,MACb,KAAKP,EACH,OAAOqC,OAAO+B,OAAO,GAAIrB,EAAO,CAC9BU,YAAaU,EAAO7D,UAExB,KAAKL,EACH,OAAOoC,OAAO+B,OAAO,GAAIrB,EAAO,CAC9BW,eAAgB,CACdd,WAAYuB,EAAO7D,QAAQsC,WAC3Be,UAAWQ,EAAO7D,QAAQqD,UAC1BC,WAAYO,EAAO7D,QAAQsD,cAGjC,KAAKxD,EACH,OAAOiC,OAAO+B,OAAO,GAAIrB,EAAO,CAC9Bc,WAAY,CACVC,OAAQK,EAAO7D,QAAQwD,UAG7B,QACE,OAAOf,IC/Bb,IAAMsB,EAAiBjB,OAAOkB,sCAAwCC,IAOvDC,EALDC,YACZV,EACAM,EAAeK,YCJV,SAAAC,GAAsC,IAAZ3B,EAAY2B,EAAZ3B,SAC/B,OAAO,SAAU4B,GACf,OAAO,SAAUT,GACf,OAAQA,EAAO5D,MACb,KAAKT,EAEH+E,MAAM,qCACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLjC,ETML,CAAEzC,KAAMP,EAAyBM,QSNG2E,MAEhCC,MAAMC,QAAQC,KACjB,MACF,KAAKrF,EACH,IAAMsF,EAAeC,SAASnB,EAAO7D,SACrCuE,MAAM,oCAAsCQ,GACzCP,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLjC,ETCL,CAAEzC,KAAMN,EAAoBK,QSDI2E,MAE5BC,MAAMC,QAAQC,KACjB,MACF,KAAKjF,EACH,IAAMoF,EAAWD,SAASnB,EAAO7D,SACjCuE,MAAM,gCAAkCU,GACrCT,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLjC,ETIL,CAAEzC,KAAMH,EAAgBE,QSJI2E,MAExBC,MAAMC,QAAQC,KAKrB,OAAOR,EAAKT,SC7BHqB,mLALJ,IACCC,EAAWpE,KAAKK,MAAM6B,MAAtBkC,OACR,OAAOnE,EAAAC,EAAAC,cAAA,MAAIkE,MAAO,CAACC,MAAO,YAAnB,OAAoCF,EAAO9E,WAJpCuB,IAAMC,WCKTyD,mLAHX,OAAOtE,EAAAC,EAAAC,cAAA,MAAIkE,MAAO,CAACC,MAAO,YAAnB,gBAFSzD,IAAMC,mBCCL0D,6LAMjB,OACEvE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACGH,KAAKK,MAAMkB,WAAW9B,MAEzBQ,EAAAC,EAAAC,cAAA,WACGH,KAAKK,MAAMkB,WAAW5B,YAEzBM,EAAAC,EAAAC,cAAA,WACGH,KAAKK,MAAMkB,WAAW3B,+CAO7B,OAA6B,MAAzBI,KAAKK,MAAMkB,WACNvB,KAAKyE,mBAEL,YAzB2B5D,IAAMC,WCCzB4D,qLAMRC,EAAGnE,GACZR,KAAKK,MAAMuE,aAAapE,EAAGlB,qCAGpB,IAAAS,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACXJ,KAAKK,MAAMC,MAAMC,IAAI,SAAAC,GAAE,OACtBP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACVK,IAAKD,EAAGlB,GACRuF,QAAS,SAACC,GAAD,OAAO/E,EAAKgF,WAAWD,EAAGtE,KACpCA,EAAGf,gBAjBkBoB,IAAMC,WCWlCkE,mLAMF,OACE/E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8E,EAAD,CAAM3E,MAAON,KAAKK,MAAMiC,UAClByC,WAAY/E,KAAKK,MAAM6E,qBATFpE,aAkBpBqE,EAFG1D,YAAQ,KAxBQ,SAACE,GACjC,MAAO,CACLuD,WAAY,SAACE,GACXzD,EdiBG,CAAEzC,KAAML,EAAaI,QcjBFmG,OAqBV3D,CAAkCuD,GChB9CK,mLAMF,OACEpF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8E,EAAD,CAAM3E,MAAON,KAAKK,MAAMkC,WAClBwC,WAAY/E,KAAKK,MAAMrB,sBATD8B,aAiBrBwE,EAFI7D,YAAQ,KAvBO,SAACE,GACjC,MAAO,CACL3C,YAAa,SAACoG,GACZzD,EAAS4D,EAAcH,OAoBV3D,CAAkC4D,WCF/CG,8LASFxF,KAAKK,MAAMoF,gBAAgBzF,KAAKK,MAAM+D,OAAOJ,+CAI7C,OACE/D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACuF,EAAD,CAAYnE,WAAcvB,KAAKK,MAAMkB,aACrCtB,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACwF,EAAD,CAAWrD,UAAatC,KAAKK,MAAMiC,YACnCrC,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACyF,EAAD,CAAYrD,WAAcvC,KAAKK,MAAMkC,qBApBd1B,IAAMC,WA0BtBW,cA7CgB,SAACC,EAAOrB,GACrC,MAAO,CACL+D,OAAQ/D,EAAM6B,MAAMkC,OACpB7C,WAAYG,EAAMW,eAAed,WACjCe,UAAWZ,EAAMW,eAAeC,UAChCC,WAAYb,EAAMW,eAAeE,aAIH,SAACZ,GAEjC,MAAO,CACL8D,gBAAiB,SAACzB,GAChBrC,EhBPG,CAAEzC,KAAMR,EAAkBO,QgBOF+E,OAgClBvC,CAA6C+D,GCnDvCK,yLAMjB,OACE5F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,KAAKK,MAAMoC,OAAOhD,MACvBQ,EAAAC,EAAAC,cAAA,WACGH,KAAKK,MAAMoC,OAAO5C,MAErBI,EAAAC,EAAAC,cAAA,WACGH,KAAKK,MAAMoC,OAAO7C,+CAOzB,OAAyB,MAArBI,KAAKK,MAAMoC,OACNzC,KAAK8F,eAEL,YAvBuBjF,IAAMC,WCqBpCiF,8LASF/F,KAAKK,MAAMrB,YAAYgB,KAAKK,MAAM+D,OAAOF,2CAIzC,OACEjE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAC6F,EAAD,CAAQvD,OAAUzC,KAAKK,MAAMoC,iBAhBV5B,IAAMC,WAsBlBW,cAvCgB,SAACC,EAAOrB,GACrC,MAAO,CACL+D,OAAQ/D,EAAM6B,MAAMkC,OACpB3B,OAAQf,EAAMc,WAAWC,SAIK,SAACd,GAEjC,MAAO,CACL3C,YAAa,SAACkF,GACZvC,EAAS4D,EAAcrB,OA4BdzC,CAA6CsE,GClC5DE,IAASC,OACPjG,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAUhD,MAAOA,GACflD,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIM,IAAK,GACPR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,KAAT,UAGJV,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3E,IACjC3B,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWpC,IAClClE,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWhC,IAChCtE,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAOE,KAAK,4BAA4BJ,OAAQ,SAAA7F,GAC9C,OAAQJ,EAAAC,EAAAC,cAACqG,EAAmBnG,MAE9BJ,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAOE,KAAK,oBAAoBJ,OAAQ,SAAA7F,GACtC,OAAQJ,EAAAC,EAAAC,cAACsG,EAAepG,SAK/BqG,SAASC,eAAe,Sb+FrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.15af1045.chunk.js","sourcesContent":["export const FETCH_SETTLEMENT_LIST = \"FETCH_SETTLEMENT_LIST\"\nexport const FETCH_SETTLEMENT = \"FETCH_SETTLEMENT\"\nexport const RECEIVE_SETTLEMENT_LIST = \"RECEIVE_SETTLEMENT_LIST\"\nexport const RECEIVE_SETTLEMENT = \"RECEIVE_SETTLEMENT\"\nexport const FETCH_PLACE = \"FETCH_PLACE\"\nexport const FETCH_PERSON = \"FETCH_PERSON\"\nexport const RECEIVE_PERSON = \"RECEIVE_PERSON\"\n","import {\n  FETCH_PERSON,\n  FETCH_PLACE,\n  FETCH_SETTLEMENT,\n  FETCH_SETTLEMENT_LIST,\n  RECEIVE_PERSON,\n  RECEIVE_SETTLEMENT,\n  RECEIVE_SETTLEMENT_LIST\n} from \"../constants\"\n\nexport function fetchSettlementList() {\n  return { type: FETCH_SETTLEMENT_LIST }\n}\n\nexport function fetchSettlement(payload) {\n  return { type: FETCH_SETTLEMENT, payload: payload }\n}\n\nexport function receiveSettlementList(payload) {\n  return { type: RECEIVE_SETTLEMENT_LIST, payload: payload }\n}\n\nexport function receiveSettlement(payload) {\n  return { type: RECEIVE_SETTLEMENT, payload: payload }\n}\n\nexport function fetchPlace(payload) {\n  return { type: FETCH_PLACE, payload: payload }\n}\n\nexport function fetchPerson(payload) {\n  return { type: FETCH_PERSON, payload: payload }\n}\n\nexport function receivePerson(payload) {\n  return { type: RECEIVE_PERSON, payload: payload }\n}\n","import PropTypes from 'prop-types'\n\n//TODO consider removing name out of here?\nexport const LIST_ITEM = PropTypes.shape({\n  id: PropTypes.number.required,\n  name: PropTypes.string.required,\n})\n\nexport const SETTLEMENT = PropTypes.shape({\n  LIST_ITEM,\n  population: PropTypes.number,\n})\n\nexport const PLACE = PropTypes.shape({\n  LIST_ITEM,\n  description: PropTypes.string,\n})\n\nexport const PERSON = PropTypes.shape({\n  LIST_ITEM,\n  race: PropTypes.string,\n  description: PropTypes.string,\n})","import React from \"react\"\nimport * as Props from \"../../props\"\nimport PropTypes from 'prop-types'\nimport { Link } from \"react-router-dom\"\n\nexport default class NavList extends React.Component {\n  static propTypes = {\n    items: PropTypes.arrayOf(Props.SETTLEMENT),\n    onSelectLink: PropTypes.func,\n  }\n\n  render() {\n    return (\n      <ul className=\"list-group list-group-flush\">\n        {this.props.items.map(el => (\n          <li className=\"list-group-item\"\n              key={el.id}>\n            <Link to={this.props.onSelectLink(el.id)}>{el.name}</Link>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n}\n","export class Settlements {\n  static show = (id) => {\n    return `/settlement/${id}`\n  }\n}","import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { fetchSettlementList as _fetchSettlementList_ } from \"../../../actions\"\nimport NavList from \"../../list/NavList\"\nimport { Settlements } from \"../../../routes\"\n\nexport const mapStateToProps = (state) => {\n  return { settlement: state.settlement }\n}\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    //TODO Maybe pull out to page object\n    fetchSettlementList: () => {\n      dispatch(_fetchSettlementList_())\n    }\n  }\n}\n\nclass _SettlementListContainer_ extends Component {\n\n  componentDidMount() {\n    this.props.fetchSettlementList()\n  }\n\n  render() {\n    return (\n      <div>\n        <NavList items={this.props.settlement}\n                 onSelectLink={Settlements.show}/>\n      </div>\n    )\n  }\n}\n\nconst SettlementListContainer = connect(mapStateToProps, mapDispatchToProps)(_SettlementListContainer_)\n\nexport default SettlementListContainer","import React from 'react'\nimport SettlementList from \"./settlement/list/SettlementListContainer\"\n\nfunction App() {\n  return (\n    <div className=\"row mt-5\">\n      <div className=\"col-md-4 offset-md-1\">\n        <h2>Settlements Go Here</h2>\n        <SettlementList/>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { RECEIVE_PERSON, RECEIVE_SETTLEMENT, RECEIVE_SETTLEMENT_LIST } from \"../constants\"\n\nconst initialState = {\n  settlements: [],\n  settlementPage: {\n    settlement: {},\n    placeList: [],\n    personList: []\n  },\n  personPage: {\n    person: {}\n  }\n}\n\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case RECEIVE_SETTLEMENT_LIST:\n      return Object.assign({}, state, {\n        settlements: action.payload\n      })\n    case RECEIVE_SETTLEMENT:\n      return Object.assign({}, state, {\n        settlementPage: {\n          settlement: action.payload.settlement,\n          placeList: action.payload.placeList,\n          personList: action.payload.personList\n        }\n      })\n    case RECEIVE_PERSON:\n      return Object.assign({}, state, {\n        personPage: {\n          person: action.payload.person,\n        }\n      })\n    default:\n      return state\n  }\n}\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from \"redux\"\nimport rootReducer from \"../reducers/index\"\nimport { tomeMiddleware } from \"../middleware\"\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  storeEnhancers(applyMiddleware(tomeMiddleware))\n)\n\nexport default store","import { FETCH_PERSON, FETCH_SETTLEMENT, FETCH_SETTLEMENT_LIST } from \"../constants\"\nimport { receivePerson, receiveSettlement, receiveSettlementList } from \"../actions\"\n\n//TODO break out to either multiple middleware or rename?\nexport function tomeMiddleware({ dispatch }) {\n  return function (next) {\n    return function (action) {\n      switch (action.type) {\n        case FETCH_SETTLEMENT_LIST:\n          //TODO move call somewhere nice\n          fetch('http://localhost:8080/settlements')\n            .then(res => res.json())\n            .then((data) => {\n              dispatch(receiveSettlementList(data))\n            })\n            .catch(console.log)\n          break\n        case FETCH_SETTLEMENT:\n          const settlementId = parseInt(action.payload)\n          fetch('http://localhost:8080/settlement/' + settlementId)\n            .then(res => res.json())\n            .then((data) => {\n              dispatch(receiveSettlement(data))\n            })\n            .catch(console.log)\n          break\n        case FETCH_PERSON:\n          const personId = parseInt(action.payload)\n          fetch('http://localhost:8080/person/' + personId)\n            .then(res => res.json())\n            .then((data) => {\n              dispatch(receivePerson(data))\n            })\n            .catch(console.log)\n          break\n\n        default:\n      }\n      return next(action)\n    }\n  }\n}\n","import React from 'react'\n\nclass Red extends React.Component {\n\n  render() {\n    const { params } = this.props.match\n    return <h1 style={{color: '#993333'}}>Red {params.id}</h1>\n  }\n}\nexport default Red","import React from 'react'\n\nclass Green extends React.Component {\n  render() {\n    return <h1 style={{color: '#559955'}}>Green</h1>\n  }\n}\nexport default Green","import React from \"react\"\nimport * as Props from \"../../props\"\n\nexport default class Settlement extends React.Component {\n  static propTypes = {\n    settlement: Props.SETTLEMENT\n  }\n\n  renderSettlement() {\n    return (\n      <div>\n        <div>\n          {this.props.settlement.name}\n        </div>\n        <div>\n          {this.props.settlement.population}\n        </div>\n        <div>\n          {this.props.settlement.description}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    if (this.props.settlement != null) {\n      return this.renderSettlement()\n    } else {\n      return null\n    }\n  }\n}","import React from \"react\"\nimport * as Props from \"../../props\"\nimport PropTypes from 'prop-types'\n\nexport default class List extends React.Component {\n  static propTypes = {\n    items: PropTypes.arrayOf(Props.LIST_ITEM),\n    onSelectItem: PropTypes.func,\n  }\n\n  selectItem(_, el) {\n    this.props.onSelectItem(el.id)\n  }\n\n  render() {\n    return (\n      <ul className=\"list-group list-group-flush\">\n        {this.props.items.map(el => (\n          <li className=\"list-group-item\"\n              key={el.id}\n              onClick={(e) => this.selectItem(e, el)}>\n            {el.name}\n          </li>\n        ))}\n      </ul>\n    )\n  }\n}\n","import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { fetchPlace as _fetchPlace_ } from \"../../actions\"\nimport List from \"../list/List\"\nimport PropTypes from \"prop-types\"\nimport * as Props from \"../../props\"\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    fetchPlace: (placeId) => {\n      dispatch(_fetchPlace_(placeId))\n    }\n  }\n}\n\nclass _PlaceListContainer_ extends Component {\n  static propTypes = {\n    placeList: PropTypes.arrayOf(Props.LIST_ITEM),\n  }\n\n  render() {\n    return (\n      <div>\n        <List items={this.props.placeList}\n              selectItem={this.props.fetchPlace}/>\n      </div>\n\n    )\n  }\n}\n\nconst PlaceList = connect(null, mapDispatchToProps)(_PlaceListContainer_)\n\nexport default PlaceList\n","import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { fetchPerson as _fetchPerson_ } from \"../../actions\"\nimport List from \"../list/List\"\nimport PropTypes from \"prop-types\"\nimport * as Props from \"../../props\"\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    fetchPerson: (placeId) => {\n      dispatch(_fetchPerson_(placeId))\n    }\n  }\n}\n\nclass _PersonListContainer_ extends Component {\n  static propTypes = {\n    personList: PropTypes.arrayOf(Props.LIST_ITEM),\n  }\n\n  render() {\n    return (\n      <div>\n        <List items={this.props.personList}\n              selectItem={this.props.fetchPerson}/>\n      </div>\n    )\n  }\n}\n\nconst PersonList = connect(null, mapDispatchToProps)(_PersonListContainer_)\n\nexport default PersonList","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Settlement from \"./Settlement\"\nimport PlaceList from \"../place/PlaceList\"\nimport PersonList from \"../person/PersonList\"\nimport { fetchSettlement as _fetchSettlement_ } from \"../../actions\"\nimport connect from \"react-redux/es/connect/connect\"\n\n\nexport const mapStateToProps = (state, props) => {\n  return {\n    params: props.match.params,\n    settlement: state.settlementPage.settlement,\n    placeList: state.settlementPage.placeList,\n    personList: state.settlementPage.personList\n  }\n}\n\nexport const mapDispatchToProps = (dispatch) => {\n\n  return {\n    fetchSettlement: (settlementId) => {\n      dispatch(_fetchSettlement_(settlementId))\n    }\n  }\n}\n\n//TODO find a proper file structure home for this\nclass _SettlementPage_ extends React.Component {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      settlementId: PropTypes.string.isRequired\n    }).isRequired,\n  }\n\n  componentDidMount() {\n    this.props.fetchSettlement(this.props.params.settlementId)\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Settlement</h2>\n        <Settlement settlement = {this.props.settlement}/>\n        <h2>Places</h2>\n        <PlaceList placeList = {this.props.placeList}/>\n        <h2>People</h2>\n        <PersonList personList = {this.props.personList}/>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(_SettlementPage_)","import React from \"react\"\nimport * as Props from \"../../props\"\n\nexport default class Person extends React.Component {\n  static propTypes = {\n    person: Props.PERSON\n  }\n\n  renderPerson() {\n    return (\n      <div>\n        <h3>{this.props.person.name}</h3>\n        <div>\n          {this.props.person.race}\n        </div>\n        <div>\n          {this.props.person.description}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    if (this.props.person != null) {\n      return this.renderPerson()\n    } else {\n      return null\n    }\n  }\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Person from \"./Person\"\nimport { fetchPerson as _fetchPerson_ } from \"../../actions\"\nimport connect from \"react-redux/es/connect/connect\"\n\n\nexport const mapStateToProps = (state, props) => {\n  return {\n    params: props.match.params,\n    person: state.personPage.person\n  }\n}\n\nexport const mapDispatchToProps = (dispatch) => {\n\n  return {\n    fetchPerson: (personId) => {\n      dispatch(_fetchPerson_(personId))\n    }\n  }\n}\n\n//TODO find a proper file structure home for this\nclass _PersonPage_ extends React.Component {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      personId: PropTypes.string.isRequired\n    }).isRequired,\n  }\n\n  componentDidMount() {\n    this.props.fetchPerson(this.props.params.personId)\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Person</h2>\n        <Person person = {this.props.person}/>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(_PersonPage_)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './js/components/App.jsx'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from \"react-redux\"\nimport store from \"./js/store\"\nimport Red from \"./js/components/Red\"\nimport Green from \"./js/components/Green\"\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\"\nimport SettlementPage from \"./js/components/settlement/SettlementPage\"\nimport PersonPage from \"./js/components/person/PersonPage\"\n\nReactDOM.render((\n  <Provider store={store}>\n    <Router>\n      <div>\n        <h2>Almanac</h2>\n        <ul>\n          <li key={1}>\n            <Link to=\"/\">Home</Link>\n          </li>\n        </ul>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/red/:id\" component={Red} />\n        <Route path=\"/green\" component={Green} />\n        <Route path=\"/settlement/:settlementId\" render={props => {\n          return (<SettlementPage {...props}/>)\n        }} />\n        <Route path=\"/person/:personId\" render={props => {\n          return (<PersonPage {...props}/>)\n        }} />\n      </div>\n    </Router>\n  </Provider>\n), document.getElementById('root'))\n\n\n//Generated\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}